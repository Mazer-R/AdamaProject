### 1. Login para obtener el token (Admin)
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
    client.global.set("auth_token", response.body.token);
%}

### 2. Login usuario normal
POST http://localhost:8080/auth/login
Content-Type: application/json

{
  "username": "user",
  "password": "user"
}

> {%
    client.global.set("auth_token_normal", response.body.token);
%}

### 3. Obtener ID del usuario admin
GET http://localhost:8080/users/myid
Authorization: Bearer {{auth_token}}

> {%
    client.global.set("user_id", response.body);
%}

### 4. Obtener ID del usuario normal
GET http://localhost:8080/users/myid
Authorization: Bearer {{auth_token_normal}}

> {%
    client.global.set("user_id_normal", response.body);
%}

### 5. Crear nuevo mensaje (sin senderId)
POST http://localhost:8080/messages
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "receiverUsername": "user",
  "subject": "Prueba API2",
  "content": "Este es un mensaje de prueba para marcar"
}

> {%
    client.global.set("message_id", response.body.id);
%}

### 6. Obtener todos los mensajes (Admin only)
GET http://localhost:8080/messages
Authorization: Bearer {{auth_token}}

### 7. Obtener inbox (mensajes no leídos recibidos)
GET http://localhost:8080/messages/my-messages/inbox
Authorization: Bearer {{auth_token_normal}}

### 8. Obtener mensajes recibidos (todos)
GET http://localhost:8080/messages/my-messages
Authorization: Bearer {{auth_token_normal}}

### 10. Obtener mensajes enviados
GET http://localhost:8080/messages/my-messages/sent
Authorization: Bearer {{auth_token}}

### 11. Obtener mensaje por ID
GET http://localhost:8080/messages/{{message_id}}
Authorization: Bearer {{auth_token}}

### 12. Marcar mensaje como leído
PATCH http://localhost:8080/messages/{{message_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token_normal}}

{
  "isRead": true
}

### 14. Test de errores - Receiver inválido
POST http://localhost:8080/messages
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "receiverId": "id-invalido",
  "subject": "Mensaje erróneo"
}

### 15. Test de errores - Obtener mensaje inexistente
GET http://localhost:8080/messages/id-inexistente
Authorization: Bearer {{auth_token}}

### 16. Test de permisos - Usuario normal intenta acceder a /messages
GET http://localhost:8080/messages
Authorization: Bearer {{auth_token_normal}}

### 17. Test de permisos - Usuario normal accede a sus mensajes - MODIFICADO (quitamos /received)
GET http://localhost:8080/messages/my-messages
Authorization: Bearer {{auth_token_normal}}

### 18. Test de validación - Campos obligatorios faltantes
POST http://localhost:8080/messages
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "receiverId": "{{user_id}}",
  "subject": ""
}


### 19. Test de seguridad - Acceso sin token - MODIFICADO (quitamos /received)
GET http://localhost:8080/messages/my-messages

### 20. Test de ownership - Marcar mensaje ajeno
PATCH http://localhost:8080/messages/{{message_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "isRead": true
}
### 21. Test de tipos de mensaje - MODIFICADO (usamos /type/{type})
GET http://localhost:8080/messages/type/INTERNAL
Authorization: Bearer {{auth_token}}

### 23. Test de parámetros inválidos - MODIFICADO (quitamos /received)
GET http://localhost:8080/messages/my-messages?isRead=maybe
Authorization: Bearer {{auth_token}}

###24
GET http://localhost:8080/users/role
Authorization: Bearer{{auth_token}}