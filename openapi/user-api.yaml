openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: CRUD API for managing users

servers:
  - url: http://localhost:8080/api

paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}:
    get:
      summary: Get a user by id
      operationId: getUserById
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '202':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    patch:
      summary: Update user fields
      operationId: updateUser
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  /auth/login:
    post:
      summary: Authenticate user
      operationId: login
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  role:
                    type: string
        '401':
          description: Invalid credentials
components:
  schemas:
    UserRequest:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - department
        - role
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        department:
          type: string
        supervisorId:
          type: string
        role:
          type: string
          enum: [ ADMIN, USER, WAREHOUSE, MANAGER ]

    UserPatchRequest:
      type: object
      properties:
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        department:
          type: string
        supervisorId:
          type: string
        role:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        department:
          type: string
        supervisorId:
          type: string
        role:
          type: string
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        modifiedBy:
          type: string
